---
import Container from '@/components/Container.astro';
import Avatar from '@/components/ui/Avatar.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection, render } from 'astro:content';
import { DEFAULT_CONFIGURATION } from '@/lib/constants';

// Define a more flexible type for blog posts
interface BlogPost {
  id: string;
  slug: string;
  body: string;
  collection: string;
  data: {
    title: string;
    description?: string;
    date: Date | string;
    updated?: Date | string;
    draft?: boolean;
    image?: string;
    seo?: {
      title?: string;
      description?: string;
      tag?: string;
    };
  };
}

export async function getStaticPaths() {
  try {
    // Get all entries from both English and Korean collections
    const enEntries = await getCollection('posts-en');
    const koEntries = await getCollection('posts-ko');
    
    // No need to filter by type since these are already post collections
    const enPosts = enEntries;
    const koPosts = koEntries;
    
    // Filter out draft posts in production for each language
    const publishedEnPosts = enPosts.filter((post) => {
      return !(import.meta.env.PROD && post.data.draft === true);
    });
    
    const publishedKoPosts = koPosts.filter((post) => {
      return !(import.meta.env.PROD && post.data.draft === true);
    });
    
    // Generate paths for English posts (default route)
    const enPaths = publishedEnPosts.map((post) => {
      // The post ID should be something like 'post_20250301/index' or 'post_20250301'
      // We want to extract just the unique identifier part for the URL
      const parts = post.id.split('/');
      
      // If the path includes a directory structure, get the post directory name
      // For example: extract 'post_20250301' from 'post_20250301/index'
      let slug = '';
      if (parts.length > 1) {
        // If the structure is post_20250301/index, we want post_20250301
        slug = parts[0];
      } else {
        // Otherwise just use the ID itself without any extension
        slug = post.id.replace(/\.[^/.]+$/, '');
      }
      
      return {
        params: { slug },
        props: { post },
      };
    });

    // Generate paths for Korean posts (with /ko/ prefix)
    const koPaths = publishedKoPosts.map((post) => {
      const parts = post.id.split('/');
      
      let slug = '';
      if (parts.length > 1) {
        slug = parts[0];
      } else {
        slug = post.id.replace(/\.[^/.]+$/, '');
      }
      
      return {
        params: { slug: `ko/${slug}` },
        props: { post },
      };
    });

    // Return all paths (English default + Korean with ko/ prefix)
    return [...enPaths, ...koPaths];
  } catch (error) {
    console.error('Error in getStaticPaths:', error);
    return [];
  }
}

// Get the current post from props
const { post } = Astro.props;

// Render the post content
const { Content } = await render(post);


---

<BaseLayout seo={{
  title: post.data.seo?.title || post.data.title,
  description: post.data.seo?.description || post.data.description || '',
  canonicalUrl: new URL(Astro.url.pathname, Astro.site).toString(),
}}>
  <Container>
    <div class="mx-auto max-w-3xl">
      <article>
        <header class="mb-8">
          <h1 class="mb-4 text-4xl font-bold">{post.data.title}</h1>
          
          <div class="mb-6 flex items-center gap-4">
            <div class="h-10 w-10">
              <Avatar />
            </div>
            <div class="flex flex-col">
              <span class="text-sm font-medium">
                {DEFAULT_CONFIGURATION.author.name}
              </span>
              <span class="text-xs text-gray-500">
                {new Date(post.data.date).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                })}
                {post.data.updated && (
                  <span class="ml-2 text-xs text-gray-400">
                    (Updated: {new Date(post.data.updated).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })})
                  </span>
                )}
              </span>
            </div>
          </div>

          {post.data.image && (
            <div class="mb-8 overflow-hidden rounded-lg">
              <img
                src={post.data.image}
                alt={post.data.title}
                class="w-full object-cover"
                loading="lazy"
              />
            </div>
          )}
        </header>

        <div class="prose prose-invert mx-auto max-w-none pb-8">
          <Content />
        </div>

        <footer class="mt-12 border-t border-gray-800 pt-8">
          <div class="flex flex-wrap items-center justify-between gap-4">
            <div class="flex items-center gap-2">
              <span class="text-sm text-gray-400">Tags:</span>
              {post.data.seo?.tag && (
                <span class="rounded-full bg-gray-800 px-3 py-1 text-xs font-medium text-gray-300">
                  {post.data.seo.tag}
                </span>
              )}
            </div>
            <div class="text-sm text-gray-400">
              <span>Posted in {new Date(post.data.date).getFullYear()}</span>
            </div>
          </div>
        </footer>
      </article>
    </div>
  </Container>
</BaseLayout>
